What the makeVisible Does
Filters the Tree:

The makeVisible function ensures that only visible nodes (i.e., nodes that are not collapsed) are included in the tree.
 This prevents unnecessary rendering of hidden nodes and their subtrees.
Creates a Fake Root:

The fakeRoot object wraps the visible tree in a single root node. This is necessary because D3's hierarchy and tree 
layout algorithms require a single root node to function properly.
Converts to D3 Hierarchy:

The d3.hierarchy function processes the fakeRoot object and its children to create a D3-compatible hierarchy object. 
This object includes additional properties (e.g., x, y, depth, parent) that are used for layout calculations.


Lets start over, I need OrgChart to use d3 hierarchy data to display a top down tree where each node is displayed as a employeeCard, Each node should have a smooth path to its parents. Get rid of collapsed parameter within each node, instead. keep track of visibility by using a visibleNodes array. when orgchart is initialized, add nodes in level 1 and level 2 to visiableNodes array. Implement the code 

function toggle(node) {
  if (!node.children || node.children.length === 0) {console.log("case 1"); return}

  const childrenAreVisible = node.children.every(child => visibleIds.value.has(child.id))

  if (childrenAreVisible) {
    // Remove children from visible set (and grandchildren, etc.)
    node.children.forEach(hideSubtree)
  } else {
    // Add children to visible
    console.log('node called', node)
    node.children.forEach(child => {
      visibleIds.value.add(child.id)
    })
  }
  updateLayout()
}

<template>
    <div
      class="absolute z-40 w-52 rounded-lg shadow bg-white border p-2 cursor-pointer
             hover:shadow-md transition"
      :style="{ left: `${node.x - (nodeWidth / 2)}px`, top: `${node.y}px` }"
      @click.stop="toggle"
    >
      <img
        :src="node.Photo || fallback"
        alt=""
        class="w-full h-20 object-cover rounded"
      />
      <div class="mt-1">
        <p class="font-semibold leading-tight">{{ node.Name }}</p>
        <p class="text-xs text-gray-500 mb-1">{{ node['Job Title'] }}</p>
        <p class="text-sm font-medium">$ {{ node.salary.toLocaleString() }}</p>
        <p class="text-sm font-medium"> x position {{ node.x }}+ y position {{node.y }}</p>
  
        <div class="mt-1 grid grid-cols-2 gap-x-1 text-[11px]">
          <span class="font-semibold">Total:</span> <span>{{ node.total }}</span>
          <span class="font-semibold">Mgmt:</span>  <span>{{ node.mgmt }}</span>
          <span class="font-semibold">IC:</span>    <span>{{ node.ic }}</span>
          <span class="font-semibold">Ratio:</span> <span>{{ node.ratio }}</span>
        </div>
      </div>
    </div>
  </template>
  
  <script setup>
  import fallback from '../assets/vue.svg'
  const props  = defineProps({ node: Object, onToggle: Function, nodeWidth: Number, nodeHeight: Number })
  const toggle = () => props.onToggle(props.node)
  </script>
  